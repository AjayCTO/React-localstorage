{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fSubmit","e","preventDefault","console","log","datas","state","name","refs","value","address","act","data","push","index","alert","setState","myForm","reset","focus","fRemove","i","splice","fEdit","title","_this2","react_default","a","createElement","className","ref","type","onClick","map","key","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77e62830.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\nconstructor(props)\n{\n\n  super(props);\n  this.state = {\n    title:\"Add Product\",\n    act:0,\n    index:\"\",\n    datas :[]\n  }\n}\n\ncomponentDidMount(){\n\n  this.refs.name.focus();\n}\n\nfSubmit =(e) => {\n  e.preventDefault();\n  console.log(\"try\");\n\n  let datas = this.state.datas;\n  let name = this.refs.name.value;\n  let address = this.refs.address.value;\n\n\n  if(this.state.act ===0){\n    let data ={\n      name,address\n    }\n  \n      datas.push(data); \n  }\n  else{\n    let index = this.state.index;\n    alert(this.state.index)\n    datas[index].name = name;\n    datas[index].address = address;\n   \n  }\n\n  \n    this.setState({\n      datas:datas,\n      act : 0\n    });\n\n    this.refs.myForm.reset();\n    this.refs.name.focus();\n}\n\n\nfRemove= (i) => {\n\n  let datas = this.state.datas;\n  datas.splice(i,1);\n  this.setState({datas : datas});\n\n  this.refs.myForm.reset();\n    this.refs.name.focus();\n}\n\nfEdit = (i) =>{\n  let data = this.state.datas[i];\n \n  this.refs.name.value = data.name;\n  this.refs.address.value = data.address;\n\nthis.setState({\nact:1,\nindex:i\n\n});\n\n}\n\n        render()\n        {\n          let datas = this.state.datas;\n            return (\n                <div >\n                  <div className=\"card animate zoomIn\">\n                <div className=\"card-header\"><h4>{this.state.title}</h4></div>\n                <div className=\"card-body card-padding\">\n                \n                <form ref=\"myForm\"  className=\"myForm\">\n\n<div className=\"form-group\">\n<label>Product Name</label>\n<input className=\"form-control\" type=\"text\" ref=\"name\"/>\n</div>\n\n<div className=\"form-group\">\n<label>Product Price</label>\n<input className=\"form-control\" type=\"text\" ref=\"address\"/>\n</div>\n\n\n\n<button className=\"btn btn-success\" onClick={(e)=> this.fSubmit(e)}> <i className=\"fa fa-check\"></i> Submit</button>\n</form>\n                \n                </div>\n                 \n                  </div>\n                \n\n\n<pre>\n<table className=\"table table-bordered\">\n<tbody>\n  {\n    datas.map((data,i)=>\n\n<tr key={i}>\n<td>{data.name}</td>\n<td>{data.address}</td>\n<td>\n<div class=\"btn-group\">\n<button className=\"btn btn-danger\" onClick={()=> this.fRemove(i)}><i className=\"fa fa-trash-o\"></i></button>\n<button className=\"btn btn-primary\" onClick={()=> this.fEdit(i)}><i className=\"fa fa-pencil\"></i></button>\n\n</div>\n</td>\n</tr>\n   \n    )\n\n  }\n  </tbody>\n</table>\n</pre>\n</div>\n            );\n\n        }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}